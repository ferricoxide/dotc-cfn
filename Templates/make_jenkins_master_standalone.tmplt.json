{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "This template deploys a standalone Linux instance to host a Jenkins master node.",
  "Parameters": {
    "AmiId": {
      "Description": "ID of the AMI to launch",
      "Type": "String",
      "AllowedPattern": "^ami-[0-9a-z]{8}$|^ami-[0-9a-z]{17}$"
    },
    "AmiDistro": {
      "Description": "Linux distro of the AMI",
      "Type": "String",
      "AllowedValues": [
        "CentOS",
        "RedHat"
      ],
      "Default": "CentOS"
    },
    "AppVolumeDevice": {
      "Description": "Device to mount an extra EBS volume. Leave blank to launch without an extra application volume",
      "Type": "String",
      "Default": "",
      "AllowedValues": [
        "",
        "/dev/xvdf",
        "/dev/xvdg",
        "/dev/xvdh",
        "/dev/xvdi",
        "/dev/xvdj"
      ]
    },
    "AppVolumeMountPath": {
      "Description": "Filesystem path to mount the extra app volume. Ignored if \"AppVolumeDevice\" is blank",
      "Type": "String",
      "Default": "/var/lib/jenkins",
      "AllowedPattern": "/.*"
    },
    "AppVolumeType": {
      "Description": "Type of EBS volume to create. Ignored if \"AppVolumeDevice\" is blank",
      "Type": "String",
      "Default": "gp2",
      "AllowedValues": [
        "gp2",
        "io1",
        "sc1",
        "st1",
        "standard"
      ]
    },
    "AppVolumeSize": {
      "Description": "Size in GB of the EBS volume to create. Ignored if \"AppVolumeDevice\" is blank",
      "Type": "Number",
      "Default": "1",
      "MinValue": "1",
      "MaxValue": "16384",
      "ConstraintDescription": "Must be between 1GB and 16384GB."
    },
    "BackupBucket": {
      "Description": "S3 Bucket to host backups of Jenkins config-data",
      "Type": "String",
      "AllowedPattern": "^[a-z][a-z0-9-]*$"
    },
    "BackupCronURL": {
      "Description": "URL to the Jenkins backup cron-file",
      "Type": "String",
      "AllowedPattern": "^$|^http://.*$|^https://.*$"
    },
    "BackupFolder": {
      "Description": "Folder in S3 Bucket to host backups of Jenkins config-data",
      "Type": "String",
      "AllowedPattern": "^[a-z][a-z0-9-]*$"
    },
    "DnsSuffix" : {
      "Description" : "Suffix for Jenkins' hostname and DNS record",
      "Type": "String",
      "ConstraintDescription": "An alphanumeric string to complete the domain portion of the instance's FQDN."
    },
    "EpelRepo": {
      "Description" : "Name of network's EPEL repo.",
      "Type": "String",
      "Default": "epel",
      "AllowedPattern": "^[a-z][a-z0-9-]*$",
      "ConstraintDescription": "An alphanumeric string that represents the EPEL yum repo's label."
    },
    "KeyPairName": {
      "Description": "Public/private key pairs allow you to securely connect to your instance after it launches",
      "Type": "AWS::EC2::KeyPair::KeyName"
    },
    "InstanceType": {
      "Description": "Amazon EC2 instance type",
      "Type": "String",
      "Default": "t2.micro",
      "AllowedValues": [
        "t2.micro",
        "t2.small",
        "t2.medium",
        "t2.large",
        "c4.large",
        "c4.xlarge",
        "m3.xlarge",
        "m4.large",
        "m4.xlarge",
        "m4.2xlarge",
        "r3.2xlarge"
      ]
    },
    "InstanceRole": {
      "Description": "IAM instance role to apply to the instance(s)",
      "Type": "String",
      "Default": ""
    },
    "NoPublicIp": {
      "Description": "Controls whether to assign the instance a public IP. Recommended to leave at \"true\" _unless_ launching in a public subnet",
      "Type": "String",
      "Default": "true",
      "AllowedValues": [
        "false",
        "true"
      ]
    },
    "NoReboot": {
      "Description": "Controls whether to reboot the instance as the last step of cfn-init execution",
      "Type": "String",
      "Default": "false",
      "AllowedValues": [
        "false",
        "true"
      ]
    },
    "NoUpdates": {
      "Description": "Controls whether to run yum update during a stack update (on the initial instance launch, SystemPrep _always_ installs updates)",
      "Type": "String",
      "Default": "false",
      "AllowedValues": [
        "false",
        "true"
      ]
    },
    "PipIndexFips": {
      "Description" : "URL of pip index  that is compatible with FIPS 140-2 requirements.",
      "Type": "String",
      "Default": "https://pypi.org/simple/",
      "AllowedPattern": "^$|^http://.*$|^https://.*$"
    },
    "PipRpm": {
      "Description" : "Name of preferred pip RPM.",
      "Type": "String",
      "Default": "python2-pip"
    },
    "ProvisionUser": {
      "Description": "Default login user account name.",
      "Type": "String",
      "Default": "autojenk",
      "AllowedPattern": "[a-z0-9]{6,12}+",
      "ConstraintDescription": "Alphanumeric string between 6 and 12 characters."
    },
    "PyStache": {
      "Description" : "Name of preferred pystache RPM.",
      "Type": "String",
      "Default": "pystache"
    },
    "SecurityGroupIds": {
      "Description": "List of security groups to apply to the instance(s)",
      "Type": "List<AWS::EC2::SecurityGroup::Id>"
    },
    "ServerHostname" : {
      "Description" : "Suffix for Jenkins' hostname and DNS record",
      "Type": "String",
      "Default": "jenkins-master",
      "ConstraintDescription": "An alphanumeric string to complete the hostname portion of the instance's FQDN."
    },
    "SubnetIds": {
      "Type": "String",
      "Description": "Subnet to associate to the Instance"
    },
    "SystemPrepBootstrapUrl": {
      "Description": "URL to the SystemPrep Bootstrapper",
      "Type": "String",
      "Default": "https://s3.amazonaws.com/systemprep/BootStrapScripts/SystemPrep-Bootstrap--Linux.sh",
      "AllowedPattern": "^http://.*\\.sh$|^https://.*\\.sh$"
    },
    "SystemPrepEnvironment": {
      "Description": "Environment in which the instance is being deployed",
      "Type": "String",
      "Default": "false",
      "AllowedValues": [
        "false",
        "dev",
        "test",
        "prod"
      ]
    },
    "CfnEndpointUrl": {
      "Description": "URL to the CloudFormation Endpoint. e.g. https://cloudformation.us-east-1.amazonaws.com",
      "Type": "String",
      "Default": "",
      "AllowedPattern": "^$|^http://.*$|^https://.*$"
    },
    "CfnBootstrapUtilsUrl": {
      "Description": "URL to aws-cfn-bootstrap-latest.tar.gz",
      "Type": "String",
      "Default": "https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz",
      "AllowedPattern": "^http://.*\\tar\\.gz$|^https://.*\\.tar\\.gz$"
    },
    "JenkinsRepoURL": {
      "Description": "URL to the Jenkins yum-repository",
      "Type": "String",
      "Default": "http://pkg.jenkins.io/redhat",
      "AllowedPattern": "^$|^http://.*$|^https://.*$"
    },
    "JenkinsRepoKeyURL": {
      "Description": "URL to the Jenkins yum-repository GPG key",
      "Type": "String",
      "Default": "https://jenkins-ci.org/redhat/jenkins-ci.org.key",
      "AllowedPattern": "^$|^http://.*$|^https://.*$"
    }
  },
  "Conditions": {
    "CreateAppVolume": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "AppVolumeDevice"
            },
            ""
          ]
        }
      ]
    },
    "UseCfnUrl": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "CfnEndpointUrl"
            },
            ""
          ]
        }
      ]
    },
    "InstallUpdates": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "NoUpdates"
            },
            "true"
          ]
        }
      ]
    },
    "Reboot": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "NoReboot"
            },
            "true"
          ]
        }
      ]
    },
    "AssignInstanceRole": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "InstanceRole"
            },
            ""
          ]
        }
      ]
    },
    "AssignPublicIp": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "NoPublicIp"
            },
            "true"
          ]
        }
      ]
    }
  },
  "Mappings": {
    "Distro2RootDevice": {
      "AmazonLinux": {
        "DeviceName": "xvda"
      },
      "RedHat": {
        "DeviceName": "sda1"
      },
      "CentOS": {
        "DeviceName": "sda1"
      }
    }
  },
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": {
            "default": "EC2 Instance Configuration"
          },
          "Parameters": [
            "AmiId",
            "AmiDistro",
            "InstanceType",
            "InstanceRole",
            "ProvisionUser",
            "KeyPairName",
            "NoReboot",
            "NoUpdates",
            "SecurityGroupIds"
          ]
        },
        {
          "Label": {
            "default": "EC2 Application EBS Volume"
          },
          "Parameters": [
            "AppVolumeDevice",
            "AppVolumeMountPath",
            "AppVolumeSize",
            "AppVolumeType"
          ]
        },
        {
          "Label": {
            "default": "Network Configuration"
          },
          "Parameters": [
            "NoPublicIp",
            "ServerHostname",
            "DnsSuffix",
            "SubnetIds"
          ]
        },
        {
          "Label": {
            "default": "S3 Resources"
          },
          "Parameters": [
            "BackupBucket",
            "BackupCronURL",
            "BackupFolder"
          ]
        },
        {
          "Label": {
            "default": "Miscellaneous Parameters"
          },
          "Parameters": [
            "EpelRepo",
            "PipIndexFips",
            "PipRpm",
            "PyStache"
          ]
        },
        {
          "Label": {
            "default": "CloudFormation Configuration"
          },
          "Parameters": [
            "CfnEndpointUrl"
          ]
        }
      ],
      "ParameterLabels": {
        "ForceNewInstancesToggle": {
          "default": "Force New Instances"
        }
      }
    },
    "AWS::CloudFormation::Designer": {
      "c49ece7d-56d3-47af-a63e-6e00ea2cb068": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 60,
          "y": 90
        },
        "z": 1,
        "embeds": []
      }
    }
  },
  "Resources": {
    "CfnLaunchConfig": {
      "Type": "AWS::EC2::Instance",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "config" : {
            "files" : {
              "/etc/cfn/cfn-hup.conf" : {
                "content" : {
                  "Fn::Join" : ["", [
                    "[main]\n",
                    "stack=", { "Ref" : "AWS::StackId" }, "\n",
                    "region=", { "Ref" : "AWS::Region" }, "\n",
                    {
                      "Fn::If" : [
                        "AssignInstanceRole", {
                          "Fn::Join" : [ "", [
                            "role=",
                            { "Ref" : "InstanceRole" },
                            "\n"
                          ]]
                        },
                        ""
                      ]
                    },
                    {
                      "Fn::If" : [
                        "AssignInstanceRole", {
                          "Fn::Join" : [ "", [
                            "url=",
                            { "Ref" : "CfnEndpointUrl" },
                            "\n"
                          ]]
                        },
                        ""
                      ]
                    }
                  ]]
                },
                "mode" : "000400",
                "owner" : "root",
                "group" : "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf" : {
                "content" : {
                  "Fn::Join" : ["", [
                    "[cfn-auto-reloader-hook]\n",
                    "triggers=post.update\n",
                    "path=Resources.CfnLaunchConfig.Metadata\n",
                    "action=/opt/aws/bin/cfn-init -v -c update",
                    " --stack ", { "Ref" : "AWS::StackName" },
                    " --resource CfnLaunchConfig",
                    {
                      "Fn::If" : [
                        "AssignInstanceRole",
                        {
                          "Fn::Join" : [ "", [
                            " --role ",
                            { "Ref" : "InstanceRole" }
                          ]]
                        },
                        ""
                      ]
                    },
                    {
                      "Fn::If" : [
                        "UseCfnUrl",
                        {
                          "Fn::Join" : [ "", [
                            " --url ",
                            { "Ref" : "CfnEndpointUrl" }
                          ]]
                        },
                        ""
                      ]
                    }
                  ]]
                },
                "mode" : "000400",
                "owner" : "root",
                "group" : "root"
              }
            },
            "services" : {
              "sysvinit" : {
                "cfn-hup" : {
                  "enabled" : "true",
                  "ensureRunning" : "true",
                  "files" : [
                    "/etc/cfn/cfn-hup.conf",
                    "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                  ]
                }
              }
            }
          },
          "install-updates" : {
            "commands" : {
              "10-install-updates" : {
                "command" : "yum update -y"
              }
            }
          }
        }
      },
      "CreationPolicy": {
        "ResourceSignal": {
          "Count": "1",
          "Timeout": "PT30M"
        }
      },
      "Properties": {
        "ImageId": {
          "Ref": "AmiId"
        },
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "IamInstanceProfile": {
          "Fn::If": [
            "AssignInstanceRole",
            {
              "Ref": "InstanceRole"
            },
            {
              "Ref": "AWS::NoValue"
            }
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  }
                ]
              ]
            }
          }
        ],
        "BlockDeviceMappings": [
          {
            "DeviceName": {
              "Fn::Join": [
                "",
                [
                  "/dev/",
                  {
                    "Fn::FindInMap": [
                      "Distro2RootDevice",
                      {
                        "Ref": "AmiDistro"
                      },
                      "DeviceName"
                    ]
                  }
                ]
              ]
            },
            "Ebs": {
              "VolumeType": "gp2",
              "DeleteOnTermination": "true"
            }
          },
          {
            "Fn::If": [
              "CreateAppVolume",
              {
                "DeviceName": {
                  "Ref": "AppVolumeDevice"
                },
                "Ebs": {
                  "VolumeSize": {
                    "Ref": "AppVolumeSize"
                  },
                  "VolumeType": {
                    "Ref": "AppVolumeType"
                  },
                  "DeleteOnTermination": "true"
                }
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          }
        ],
        "KeyName": {
          "Ref": "KeyPairName"
        },
        "NetworkInterfaces": [
          {
            "DeviceIndex": "0",
            "AssociatePublicIpAddress": {
              "Fn::If": [
                "AssignPublicIp",
                "true",
                "false"
              ]
            },
            "GroupSet": {
              "Ref": "SecurityGroupIds"
            },
            "SubnetId": {
              "Ref": "SubnetIds"
            }
          }
        ],
        "UserData": {
          "Fn::Base64" : {
            "Fn::Join" : [ "", [
              "#cloud-config\n",
              "\n",
              "system_info:\n",
              "  default_user:\n",
              "    name: ",
                { "Ref" : "ProvisionUser" },
              "\n",
              {
                "Fn::If" :
                [
                  "CreateAppVolume",
                  {
                    "Fn::Join" : [ "", [
                      "\n",
                      "bootcmd:\n",
                      "  - cloud-init-per instance mkfs-appvolume mkfs -t ext4 ",
                      { "Ref" : "AppVolumeDevice" },
                      "\n",
                      "mounts:\n",
                      "  - [ ",
                        { "Ref" : "AppVolumeDevice" }, ", ",
                        { "Ref" : "AppVolumeMountPath" },
                      " ]\n"
                    ]]
                  },
                  { "Ref" : "AWS::NoValue" }
                ]
              },
              "\n",
              "hostname: ",
                     { "Ref" : "ServerHostname" },
              "\n",
              "fqdn: ",
                     { "Ref" : "ServerHostname" },
                     ".",
                     { "Ref" : "DnsSuffix" },
              "\n",
              "manage_etc_hosts: true\n",
              "\n",
              "yum_repos:\n",
              "  jenkins:\n",
              "    name: Jenkins CI service-repository\n",
              "    baseurl: ",
                { "Ref" : "JenkinsRepoURL" },
              "\n",
              "    enabled: true\n",
              "    gpgkey: ",
                { "Ref" : "JenkinsRepoKeyURL" },
              "\n",
              "\n",
              "runcmd:\n",
              "  - |\n",
              "      \n",
              "      # Helper function\n",
              "      function error_exit {\n",
              "         /opt/aws/bin/cfn-signal -e 1 --stack ",
                           { "Ref" : "AWS::StackName" },
                           " --resource CfnLaunchConfig\n",
              "         exit 1\n",
              "      }\n",
              "      \n",
              "      # Temp-disable SELinux\n",
              "      setenforce 0 || error_exit 'Could not change SEL-mode'\n",
              "      \n",
              "      # Try to get firewalld ready for commands\n",
              "      firewall-offline-cmd --enabled\n",
              "      \n",
              "      # Add firewall exceptions\n",
              "      firewall-cmd --zone=public --add-port=80/tcp --permanent\n",
              "      firewall-cmd --zone=public --add-port=443/tcp --permanent\n",
              "      firewall-cmd --zone=public --add-port=8080/tcp --permanent\n",
              "      firewall-cmd --reload\n",
              "      \n",
              "      # Install missing RPMs\n",
              "      yum --enablerepo=",
                        { "Ref" : "EpelRepo" },
                        " install -y ",
                        { "Ref" : "PyStache" },
                        " ",
                        { "Ref" : "PipRpm" },
                        "|| error_exit 'Could not change install dependent RPMs.'\n",
              "      \n",
              "      # Initialize the Cfn subsystems\n",
              "      /opt/aws/bin/cfn-init -s ",
                        { "Ref" : "AWS::StackName" },
                                 " -r CfnLaunchConfig ",
                      " --region ",
                         { "Ref" : "AWS::Region" },
                         " && echo 'Successfully ran cfn-init'",
                         " || error_exit 'Failed to run cfn-init' > /dev/stderr\n",
              "      \n",
              "      # Export cert bundle ENVs\n",
              "      export AWS_CA_BUNDLE=/etc/pki/tls/certs/ca-bundle.crt\n",
              "      export REQUESTS_CA_BUNDLE=/etc/pki/tls/certs/ca-bundle.crt\n",
              "      \n",
              "      # Do pip-stuff\n",
              "      pip install -i ",
                        { "Ref": "PipIndexFips" },
                        " --upgrade pip\n",
              "      \n",
              "      # Install Jenkins\n",
              "      yum install -y jenkins || error_exit 'Jenkins install failed'\n",
              "      \n",
              "      # Restore JENKINS_HOME content (if available)\n",
              "      echo \"Restoring Jenkins from S3\"\n",
              "      su -s /bin/bash jenkins -c \"/usr/bin/aws s3 sync s3://",
                        { "Ref" : "BackupBucket" },
                        "/",
                        { "Ref" : "BackupFolder" },
                        "/backups/sync/JENKINS_HOME/ /var/lib/jenkins\" || ",
                        "echo \"Fresh Install: No restorable S3 content found.\"\n",
              "      \n",
              "      # Start Jenkins\n",
              "      systemctl enable jenkins\n",
              "      systemctl start jenkins\n",
              "      \n",
              "      # Install Jenkins backup cron-job\n",
              "      curl -skL ",
                        { "Ref" : "BackupCronURL" },
                        " -o /tmp/jenkins_cron || ",
                        "error_exit 'Could not download cron config'\n",
              "      install -b -m 0600 -o jenkins -g jenkins ",
                       "/tmp/jenkins_cron /var/spool/cron/jenkins ||",
                       "error_exit 'Could not inject cron config'\n",
              "      echo jenkins >> /etc/cron.allow || ",
                       "error_exit 'Could not add jenkins as an allowed cron-user'\n",
              "      systemctl restart crond\n",
              "      \n",
              "      # Temp-disable SELinux\n",
              "      setenforce 1 || error_exit 'Could not change SEL-mode'\n",
              "      \n",
              "      # Signal Cfn that we're good\n",
              "      /opt/aws/bin/cfn-signal -e 0 --stack ",
                        { "Ref" : "AWS::StackName" },
                        " --resource CfnLaunchConfig --url ",
                        { "Ref" : "CfnEndpointUrl" },
                        "\n",
              ""
              ]
            ]
          }
        }
      }
    }
  }
}
